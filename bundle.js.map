{"version":3,"sources":["htmlTemplates.mdl.js","drawer/drawer.mdl.js","media-info/media.info.mdl.js","my-playlists/my-playlists.mdl.js","navigator/navigator.mdl.js","playlist-editor/playlist.editor.mdl.js","preset/presets.mdl.js","resources/echoes.resources.mdl.js","search/media.search.mdl.js","services/echoes.services.mdl.js","youtube-player/youtube.player.mdl.js","directives/ui/ui-controls.mdl.js","directives/youtube/youtube.directives.mdl.js","resources/youtube/youtube.api.mdl.js","app.js","controllers/app.ctrl.js","controllers/duration.ctrl.js","controllers/feed.ctrl.js","controllers/user-menu.ctrl.js","directives/loader.drv.js","drawer/drawer-toggle.directive.js","drawer/drawer.closed.directive.js","drawer/drawer.ctrl.js","drawer/drawer.settings.srv.js","filters/titleCase.flr.js","media-info/media.info.ctrl.js","media-info/on.source.click.drv.js","my-playlists/my-playlist.ctrl.js","my-playlists/my-playlists.ctrl.js","navigator/navigator.directive.js","playlist-editor/playlist.editor.drv.js","playlist-editor/playlist.editor.settings.srv.js","preset/preset.ctrl.js","preset/preset.service.js","resources/constants.js","search/media.search.ctrl.js","services/playlist.info.srv.js","services/youtube.playlists.info.srv.js","services/youtube.search.srv.js","services/youtube.video.info.srv.js","user-playlists/user-playlists.ctrl.js","youtube-player/player.resizer.directive.js","youtube-player/player.resizer.srv.js","youtube-player/youtube.player.api.srv.js","youtube-player/youtube.player.directive.js","youtube-player/youtube.player.settings.srv.js","youtube-video/youtube.video.ctrl.js","youtube-videos/youtube.videos.ctrl.js","controllers/youtube-player/youtube-player.ctrl.js","resources/youtube/user.playlists.srv.js","resources/youtube/youtube.user.srv.js","directives/ui/e-dropdown/e-dropdown.drv.js","directives/youtube/youtube-api/youtube-sign-in.drv.js","directives/youtube/youtube-list/media-list.drv.js","directives/youtube/youtube-media/youtube.media.drv.js","directives/youtube/youtube-playlist/youtube-playlist.drv.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnjhvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function() {\n    'use strict';\n angular.module('htmlTemplates', []);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('drawer', [\n            \n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('media.info', [\n            'youtube.player',\n            'echoes.services',\n            'ngSanitize'\n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.playlists', [ \n        \t'youtube.api',\n        \t'youtube.directives',\n            'youtube.player',\n            'echoes.resources'\n        ])\n        .config(configPlaylists);\n\n    /* ngInject */\n    function configPlaylists ($routeProvider, $locationProvider) {\n        $routeProvider\n            .when('/myPlaylists', {\n                templateUrl: 'app/my-playlists/my-playlists.tpl.html',\n                controller: 'MyPlaylistsController',\n                controllerAs: 'vm'\n            })\n\n            .when('/playlist/:playlistId', {\n                templateUrl: 'app/my-playlists/my-playlist.tpl.html',\n                controller: 'MyPlaylistCtrl',\n                controllerAs: 'vm',\n                resolve: {\n                    videos: getPlaylistVideos,\n                    playlist: getPlaylistInfo\n                }\n            });\n    }\n\n    /* ngInject */\n    function getPlaylistVideos ($route, YoutubeVideoInfo, PlaylistInfo, YoutubeUser) {\n        var playlistId = $route.current.params.playlistId;\n        return YoutubeUser.isSignedIn() ? \n            YoutubeVideoInfo.getPlaylist(playlistId) :\n            PlaylistInfo.list(playlistId);\n    }\n\n    /* @ngInject */\n    function getPlaylistInfo ($route, YoutubePlaylistInfo) {\n        return YoutubePlaylistInfo.list($route.current.params.playlistId);\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('navigator', [\n            \n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('playlist.editor', [\n            'echoes.services'\n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('presets', [\n            'echoes.resources',\n            'echoes.services'\n        ])\n        .config(config);\n\n    function config ($httpProvider) {\n    \t// $httpProvider.interceptors.push('searchListener');\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('echoes.resources', [\n            \n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('media.search', [\n        \t'echoes.services',\n        \t'youtube.player'\n        ]);\n \n})();","(function() {\n    'use strict';\n\n    angular\n        .module('echoes.services', [\n            'echoes.resources',\n            'LocalStorageModule',\n            'youtube.api'\n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.player', [\n            \n        ]);\n})();","angular.module('ui.controls', []);","angular.module('youtube.directives', []);","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.api', [\n            'youtube.directives'\n        ])\n        .factory('uGapi', uGapi);\n\n    /* @ngInject */\n    function uGapi($q, $rootScope, YoutubeApi){\n    \treturn GapiApi;\n\n        // config:\n        //  resourceName - api to use, i.e, \"playlists\"\n        //  pages - number of next pages to fetch\n        function GapiApi(config){\n            var resourceName = config.resourceName;\n            var pages = config.pages || 0;\n            var pagesCounter = 0;\n\n            var defer;\n            var params = {\n                part: 'snippet,contentDetails',\n                maxResults: 50,\n                mine: true\n            };\n            \n            var service = {\n                list: list,\n                params: params,\n                insert: insert,\n                remove: remove\n            };\n            return service;\n\n\n        \tfunction list (args, transformFunc) {\n        \t\tdefer = $q.defer();\n        \t\targs = args || {};\n        \t\tgapiList(angular.copy(params, args), transformFunc);\n        \t\treturn defer.promise;\n        \t}\n\n        \tfunction gapiList(args, transformFunc) {\n                YoutubeApi.auth().then(function(){\n                    getAllItems(args, transformFunc).then(function (res) {\n                        defer.resolve(res.result);\n                    });\n\n                    // gapi.client.youtube[resourceName]\n                    //     .list(args)\n                    //     .then(onGapiEnd);\n                });\n        \t}\n\n            function onGapiEnd (response) {\n                if (pages) {\n                    getNextPage(response);\n                } else {\n                    endPromise(response);\n                }\n            }\n\n        \tfunction getNextPage(response) {\n        \t\tvar pageToken = response.result.nextPageToken;\n        \t\tvar _params = angular.copy(params);\n                var allowNextPage = pageToken && pages === 'all' || pagesCounter < parseInt(pages);\n        \t\t_params.pageToken = pageToken;\n        \t\tif (allowNextPage) {\n        \t\t\tdefer.notify(response.result);\n                    pagesCounter++;\n        \t\t\tgapiList(_params);\n        \t\t\treturn;\n        \t\t}\n                endPromise(response);\n            }\n\n            function endPromise (response) {\n        \t\tdefer.resolve(response.result);\n        \t\t$rootScope.$apply();\n            }\n\n            function getAllItems(params, transformFunc) {\n                var items = [];\n                var token;\n                var _defer = $q.defer();\n                \n                getItems();\n\n                return _defer.promise;\n\n                function getItems () {\n                    return gapi.client.youtube[resourceName].list(params)\n                        .then(function (response) {\n                            token = response.result.nextPageToken;\n                            return response;\n                        })\n                        .then(transformFunc)\n                        .then(function (response) {\n                            var returnValue = response;\n                            Array.prototype.push.apply(items, response.length ? response : response.result.items);\n                            if (token) {\n                                params.pageToken = token;\n                                return getItems();\n                            }\n                            // if (!response.items) {\n                            //     returnValue = items;\n                            // } else {\n                            if (response.result) {\n                                response.result.items = items;\n                            }\n                            if (response.length)  {\n                                returnValue = {items: items};\n                            }\n                            // response.result.items = items;\n                            _defer.resolve(returnValue);\n                            return returnValue;\n                        });\n                }\n            }\n\n            function insert (params) {\n                return gapi.client.youtube[resourceName]\n                    .insert(params)\n                    .then(function (response) {\n                        return response;\n                    });\n\n            }\n\n            function remove (playlistId) {\n                var params = {\n                    id: playlistId\n                };\n                return gapi.client.youtube[resourceName].delete(params);\n            }\n        }\n    }\n})();","(function() {\n\t'use strict';\n\n\tangular.module('mediaDeck', [\n\t\t'ngRoute',\n\t\t'ngSanitize',\n\t\t'htmlTemplates',\n\t\t'youtube.directives',\n\t\t'ui.controls',\n\t\t'ui.bootstrap',\n\t\t'echoes.services',\n\t\t'echoes.resources',\n\t\t'youtube.api',\n\t\t'youtube.playlists',\n\t\t'youtube.player',\n\t\t'media.info',\n\t\t'media.search',\n\t\t'drawer',\n\t\t'presets',\n\t\t'ngAnimate',\n\t\t'LocalStorageModule',\n\t\t'infinite-scroll',\n\t\t'navigator',\n\t\t'playlist.editor',\n\t\t'ui.sortable',\n\t\t'720kb.socialshare'\n\t])\n\t.config(config);\n\n\tfunction config ($routeProvider, $locationProvider, localStorageServiceProvider) {\n\n\t\tlocalStorageServiceProvider.setPrefix('EchoesPlayer');\n\n\t\t$routeProvider\n\t\t\t.when('/', {\n\t\t\t\ttemplateUrl: 'app/youtube-videos/youtube.videos.tpl.html',\n\t\t\t\tcontroller: 'YoutubeVideosCtrl',\n\t\t\t\tcontrollerAs: 'vm'\n\t\t\t})\n\n\t\t\t.when('/video/:id', {\n\t\t\t\ttemplateUrl: 'app/youtube-video/youtube.video.tpl.html',\n\t\t\t\tcontroller: 'YoutubeVideoCtrl',\n\t\t\t\tcontrollerAs: 'vm',\n\t\t\t})\n\n\t\t\t.otherwise({\n\t\t\t\tredirectTo: '/'\n\t\t\t});\n\t}\n\n})();","(function(){\n\nangular\n    .module('mediaDeck')\n    .controller('AppCtrl', AppCtrl);\n\nfunction AppCtrl($scope, YoutubeSearch, DrawerSettings){\n    var vm = this;\n    vm.searching = YoutubeSearch.getIsSearching;\n    vm.drawerIsOpened = DrawerSettings.opened;\n}\n\n})();","(function(){\n\tangular\n\t\t.module('mediaDeck')\n\t\t.controller('DurationCtrl',  DurationCtrl);\n\nfunction DurationCtrl($scope, YoutubeSearch){\n\tvar vm = this;\n\n\tvm.durations = [\n\t    'Any',\n\t    'Short (less then 4 minutes)',\n\t    'Medium (4-20 minutes)',\n\t    'Long (longer than 20 minutes)'\n\t];\n\n\tvar durationsMap = [\n\t    '',\n\t    'short',\n\t    'medium',\n\t    'long'\n\t];\n\n\tvm.onDurationChange = onDurationChange;\n\n\tfunction onDurationChange (duration, index) {\n\t    YoutubeSearch.setType(YoutubeSearch.types.VIDEO);\n\t    YoutubeSearch.setDuration(durationsMap[index]);\n\t    YoutubeSearch.search();\n\t}\n}\n\n})();","(function() {\n\tangular\n\t\t.module('mediaDeck')\n\t\t.controller('FeedCtrl', FeedCtrl);\n\n\t/* @ngInject */\n\tfunction FeedCtrl($scope, $rootScope, YoutubeSearch) {\n\t    var vm = this;\n\t\tvm.data = {\n\t\t\titems: [\n\t\t\t{ label: 'Videos', icon: 'film', value: 'video' },\n\t\t\t{ label: 'Playlists', icon: 'th-list', value: 'playlist' }\n\t\t\t]\n\t\t};\n\n\t\tvm.active = vm.data.items[0];\n\n\t\tvm.setFeed = setFeed;\n\n\t    function setFeed(item){\n\t\t\tvm.active = item;\n\t        YoutubeSearch.setType(item.value);\n\t\t}\n\t}\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('mediaDeck')\n        .controller('UserMenuCtrl', UserMenuCtrl);\n        \n\n    /* @ngInject */\n    function UserMenuCtrl($scope, $rootScope, YoutubeApi, YoutubeUser) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.title = 'UserMenuCtrl';\n        vm.saveUser = saveUser;\n        vm.signOut = signOut;\n        vm.user = YoutubeUser.data;\n        activate();\n\n        /////////////\n        \n        function activate () {\n            YoutubeApi.auth().then(function(user){\n                YoutubeUser.update(user);\n            });\n        }\n\n        function saveUser (resource) {\n        \tYoutubeUser.update(resource.items[0]);\n        }\n\n        function signOut ($event) {\n            YoutubeUser.signOut();\n            $event.stopPropagation();\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('mediaDeck')\n        .directive('loader', loader);\n\n    /* @ngInject */\n    function loader ($http) {\n        // Usage:\n        //\t<div loader></div>\n        // Creates:\n        //\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n        \t\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('drawer')\n        .directive('drawerToggle', drawerToggle);\n\n    /* @ngInject */\n    function drawerToggle (DrawerSettings) {\n        // Usage:\n        //\t<button drawer-toggle=\"css-class-to-apply\"></button>\n        // Creates:\n        //\tan action which will toggle the drawer\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n        \tvar cssClassToApply = attrs.drawerToggle;\n        \telement.bind('click', function (ev) {\n        \t\tev.preventDefault();\n        \t\tDrawerSettings.toggle();\n        \t\tif (cssClassToApply && cssClassToApply.length) {\n        \t\t\taddStateAsClass();\n        \t\t}\n        \t\tscope.$apply();\n        \t});\n\n        \taddStateAsClass();\n        \t\n        \tfunction addStateAsClass () {\n        \t\telement.toggleClass(cssClassToApply, DrawerSettings.opened());\n        \t}\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('drawer')\n        .directive('drawerClosed', drawerClosed);\n\n    /* @ngInject */\n    function drawerClosed (DrawerSettings) {\n        // Usage:\n        //\t<button drawer-closed=\"css-class-to-apply-when-closed\"></button>\n        // Creates:\n        //\tan action which will toggle the drawer\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n        \tvar cssClassToApply = attrs.drawerClosed;\n            scope.drawerOpened = DrawerSettings.opened;\n        \tscope.$watch('drawerOpened()', function (nState, oldState) {\n                if (nState !== oldState) {\n                    addStateAsClass();\n                }\n            });\n\n        \taddStateAsClass();\n        \t\n        \tfunction addStateAsClass () {\n        \t\telement.toggleClass(cssClassToApply, !scope.drawerOpened());\n        \t}\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('drawer')\n        .controller('DrawerCtrl', DrawerCtrl);\n\n    /* @ngInject */\n    function DrawerCtrl(DrawerSettings) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.title = 'DrawerCtrl';\n        vm.opened = DrawerSettings.opened;\n        vm.toggle = DrawerSettings.toggle;\n\n        activate();\n\n        function activate() {\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('drawer')\n        .factory('DrawerSettings', DrawerSettings);\n\n    /* @ngInject */\n    function DrawerSettings() {\n        var isOpen = true;\n        var service = {\n            toggle: toggle,\n            opened: opened\n        };\n        return service;\n\n        ////////////////\n\n        function toggle() {\n        \tisOpen = !isOpen;\n        }\n\n        function opened () {\n        \treturn isOpen;\n        }\n    }\n})();","angular.module('mediaDeck')\n.filter('titleCase', [\nfunction() {\n\tvar titleCaseFilter = function(input) {\n\t\tvar words = input.split(' ');\n\t\tfor (var i = 0; i < words.length; i++) {\n\t\t\twords[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n\t\t}\n\t\treturn words.join(' '); \n\t};\n\treturn titleCaseFilter;\n}]);","(function() {\n    'use strict';\n\n    angular\n        .module('media.info')\n        .controller('MediaInfoCtrl', MediaInfoCtrl);\n\n    /* @ngInject */\n    function MediaInfoCtrl($scope, YoutubeVideoInfo, YoutubePlayerSettings) {\n        var vm = this;\n    \tvm.video = {\n    \t\ttitle: 'No Media Yet...',\n    \t\tdesc: '',\n            thumb: '',\n    \t\tid: YoutubePlayerSettings.getCurrentId\n    \t};\n        vm.onDescriptionClick = onDescriptionClick;\n\n    \t$scope.$watch('vm.video.id()', function (nid, o) {\n    \t\tif (nid) {\n    \t\t\tYoutubeVideoInfo.list(nid).then(updateVideo);\n    \t\t}\n    \t});\n\n    \tfunction updateVideo (items) {\n\t\t\tif (items && items.length) {\n                vm.video.title = items[0].snippet.title;\n                vm.video.desc = parseTimeTracks(items[0].snippet.description);\n\t\t\t\tvm.video.thumb = items[0].snippet.thumbnails.high.url;\n            }\n    \t}\n\n    \t// parse multiline tracks to single\n    \t// add buttons for time stops to allow playing of single tracks\n    \t// in full albums in one video\n    \tfunction parseTimeTracks (description) {\n    \t\tvar desc = description.replace(/([0-9]*[0-9]*:*[0-9]*[0-9]:[0-9][0-9])/gim, \n\t\t\t'<a class=\"btn btn-mini play-time\" time=\"$1\">$1</a>\\r', 'gim');\n\t\t\treturn desc;\n    \t}\n\n        function onDescriptionClick (time) {\n            YoutubePlayerSettings.seekTo(hmsToSeconds(time));\n        }\n\n        // converts time duration string to seconds as number\n        // @param {string} d - duration string - 6:05, 1:04:05\n        // @return {number}\n        function hmsToSeconds (d) {\n            d = d.split(':');\n            var hasHour = d.length === 3;\n            var h = hasHour ? parseInt(d[0], 10) * 60 * 60 : 0;\n            var m = hasHour ? d[1] : d[0];\n            var s = hasHour ? d[2] : d[1];\n            return h + parseInt(m, 10) * 60 + parseInt(s, 10);\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('media.info')\n        .directive('onSourceClick', onSourceClick);\n\n    /* @ngInject */\n    function onSourceClick ($parse, $rootScope) {\n        // Usage:\n        //\t<div on-source-click=\"getTime\"><div>\n        // Creates:\n        //\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n        \tvar callback = $parse(attrs.onSourceClick)(scope);\n        \telement.bind('click', onClick);\n\n        \tfunction onClick ($event) {\n\t            var text = $event.target.innerText;\n\t            callback(text);\n                $rootScope.$apply();\n        \t}\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.playlists')\n        .controller('MyPlaylistCtrl', MyPlaylistCtrl);\n\n    /* @ngInject */\n    function MyPlaylistCtrl($scope, videos, playlist, YoutubePlayerSettings) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.title = 'MyPlaylistCtrl';\n        vm.videos = videos;\n        vm.playlist = playlist[0];\n        vm.playVideo = playVideo;\n        vm.queueVideo = queueVideo;\n        activate();\n\n        function activate() {\n        }\n\n        function playVideo (video) {\n        \tconsole.log('playing user video');\n            YoutubePlayerSettings.playVideoId(video);\n            YoutubePlayerSettings.nowPlaylist.length = 0;\n            angular.extend(YoutubePlayerSettings.nowPlaylist, vm.videos);\n            vm.videos.forEach(function(v, index){\n                if (v === video) {\n                    YoutubePlayerSettings.nowPlaying.index = index;\n                }\n            });\n        }\n\n        function queueVideo (video) {\n            YoutubePlayerSettings.queueVideo(video);\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.playlists')\n        .controller('MyPlaylistsController', MyPlaylistsController);\n\n    /* @ngInject */\n    function MyPlaylistsController($http, YoutubePlayerSettings, UserPlaylists, YoutubeVideoInfo, YoutubeUser) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.title = 'UserPlaylistsCtrl';\n        vm.playlists = UserPlaylists.tracks;\n        vm.playPlaylist = playPlaylist;\n        vm.search = '';\n        vm.isUserSignedIn = YoutubeUser.isSignedIn;\n\n        // activate();\n\n        // function activate() {\n        // }\n\n        function playPlaylist (playlist) {\n            YoutubeVideoInfo.getPlaylist(playlist.id).then(YoutubePlayerSettings.playPlaylist);\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('navigator')\n        .directive('navigator', navigator);\n\n    /* @ngInject */\n    function navigator () {\n        // Usage:\n        //  <ul navigator></ul>\n        // Creates:\n        //  manages navigation links and its active state in dom\n        //  should search for any anchors with li parents and handles\n        //  the active class name based on a state\n        var directive = {\n            link: link,\n            restrict: 'A',\n            // controllerAs: 'vm',\n            scope: {}\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n            var activeCssClass = 'active';\n            var anchors = element.find('a');\n            var listItems = anchors.parent();\n            anchors.bind('click', updateActive);\n\n            function updateActive (ev) {\n                var el = angular.element(ev.target);\n                var listItem = el.parent();\n                if (!listItem.hasClass(activeCssClass)) {\n                    listItems.removeClass(activeCssClass);\n                    listItem.addClass(activeCssClass);\n                }\n            }\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('playlist.editor')\n        .directive('playlistEditor', playlistEditor);\n\n    /* @ngInject */\n    function playlistEditor (PlaylistEditorSettings, UserPlaylists) {\n        // Usage:\n        //\t<playlist-editor></playlist-editor>\n        // Creates:\n        //\n        var directive = {\n            link: link,\n            controller: controller,\n            controllerAs: 'vm',\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'app/playlist-editor/playlist.editor.tpl.html',\n            scope: {}\n        };\n        return directive;\n\n        /* @ngInject */\n        function controller ($scope) {\n            /*jshint validthis: true */\n        \tvar vm = this;\n        \tvm.getMedia = PlaylistEditorSettings.getMedia;\n        \tvm.playlists = UserPlaylists.tracks;\n        \tvm.search = '';\n        \tvm.add = add;\n        \tvm.showCreate = false;\n        \tvm.create = create;\n        \tvm.remove = remove;\n\n        \tactivate();\n\n        \tfunction activate () {\n        \t\t$scope.$watch('vm.search', function (newValue) {\n        \t\t\tvar allTitles = vm.playlists.map(function(playlist){\n        \t\t\t\treturn playlist.snippet.title;\n        \t\t\t}).join(' ');\n    \t\t\t\tvm.showCreate = allTitles.indexOf(newValue) === -1 ? true : false;\n        \t\t});\n        \t}\n\n        \tfunction add (playlist) {\n        \t\tplaylist.inProcess = true;\n        \t\tUserPlaylists.addToPlaylist(playlist.id, vm.getMedia()).then(showAddResult);\n\t        \t\n\t        \tfunction showAddResult (response) {\n\t        \t\tif (response.status === 200) {\n\t        \t\t\tplaylist.contentDetails.itemCount++;\n\t        \t\t\tplaylist.inProcess = false;\n\t        \t\t\t$scope.$apply();\n\t        \t\t}\n\t        \t}\n        \t}\n\n        \tfunction create () {\n        \t\t// TODO - add description\n        \t\tUserPlaylists.createPlaylist(vm.search, '');\n        \t}\n\n        \tfunction remove (playlist) {\n        \t\tplaylist.inProcess = true;\n        \t\treturn UserPlaylists.removePlaylist(playlist.id).then(function (response) {\n        \t\t\tplaylist.inProcess = false;\n        \t\t\t$scope.$apply();\n        \t\t});\n        \t}\n        }\n\n        function link(scope, element, attrs) {\n        \tvar $modal = element;\n        \tscope.isVisible = PlaylistEditorSettings.visibility;\n        \tscope.close = close;\n        \tactivate();\n\n        \tfunction activate () {\n        \t\tscope.$watch('isVisible()', function (newVisible, oldVisible) {\n        \t\t\tif (!angular.equals(newVisible, oldVisible)){\n        \t\t\t\tvar visibility = newVisible ? 'show' : 'hide';\n        \t\t\t\t$modal.modal(visibility);\n        \t\t\t}\n        \t\t});\n\n        \t\t$modal.on('hidden.bs.modal', function () {\n        \t\t\tPlaylistEditorSettings.hide();\n        \t\t\tscope.vm.search = '';\n        \t\t\tscope.$apply();\n        \t\t});\n        \t}\n\n        \tfunction close () {\n        \t\t$modal.modal('hide');\n        \t}\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('playlist.editor')\n        .factory('PlaylistEditorSettings', PlaylistEditorSettings);\n\n    /* @ngInject */\n    function PlaylistEditorSettings(UserPlaylists) {\n        var service = {\n            add: add,\n            getMedia: getMedia,\n            addMedia: addMedia,\n            show: show,\n            hide: hide,\n            visibility: visibility\n        };\n        var currentMedia;\n        var isVisible = false;\n\n        return service;\n\n        ////////////////\n\n        function add(media) {\n        \tcurrentMedia = media;\n        }\n\n        function getMedia () {\n        \treturn currentMedia;\n        }\n\n        function addMedia (media) {\n        \tcurrentMedia = media;\n        }\n\n        function show () {\n        \tisVisible = true;\n        }\n\n        function hide () {\n        \tisVisible = false;\n        }\n\n        function visibility () {\n        \treturn isVisible;\n        }\n    }\n})();","(function(){\n\n\n\tangular\n\t\t.module('presets')\n\t\t.controller('PresetCtrl', PresetCtrl);\n\n\tfunction PresetCtrl(preset, YoutubeSearch) {\n\t\tvar vm = this;\n\t\tvar indexOfSelectedPreset;\n\t\tvm.data = {\n\t\t\tlabel: 'Preset'\n\t\t};\n\t\tvm.presets = preset.items;\n\t\tvm.updatePreset = updatePreset;\n\t\tvm.selected = preset.selected().index;\n\t\t// put selected preset\n\n\t    function updatePreset (presetValue) {\n\t    \tYoutubeSearch.params.q = preset.update(YoutubeSearch.params.q, presetValue);\n\t    \tYoutubeSearch.search();\n\t    }\n\t}\n\n})();","(function() {\n    'use strict';\n\n    angular.module('presets')\n    .factory('preset', preset)\n    .factory('searchListener', searchListener);\n\n    function preset (localStorageService){\n        var Storage = {\n            PRESET: 'preset'\n        };\n        var items = [\n            'all',\n            'albums',\n            'live'\n        ];\n        var query;\n        var selectedPreset = localStorageService.get(Storage.PRESET);\n        var selectedIndex = 0;\n        var service = {\n            selected: selected,\n            update: update,\n            items: items,\n            getQuery: getQuery\n        };\n        activate();\n\n        return service;\n\n        function activate () {\n            updateSelectedIndex(selectedPreset);\n        }\n\n        function update (currentQuery, newPreset){\n            // query = currentQuery;\n            var query = currentQuery.replace(selectedPreset, '').trim();\n            selectedPreset = newPreset.toLowerCase();\n            if (selectedPreset === 'all') {\n                selectedPreset = '';\n            }\n            query += ' ' + selectedPreset.toLowerCase();\n            localStorageService.set(Storage.PRESET, selectedPreset);\n            updateSelectedIndex(selectedPreset);\n            return query;\n        }\n\n        function updateSelectedIndex (preset) {\n            var indexOfSelectedPreset = items.indexOf(preset);\n            selectedIndex = indexOfSelectedPreset === -1 ? 0 : indexOfSelectedPreset; \n        }\n\n        function selected () {\n            return {\n                label: selectedPreset,\n                index: selectedIndex\n            };\n        }\n\n        function getQuery () {\n            return query;\n        }\n    }\n\n    function searchListener (preset) {\n        return {\n            'request': addPreset\n        };\n\n        function addPreset (config) {\n            if (config.url.match(/v3\\/search/gim)) {\n                config.transformRequest = transformSearch;\n            }\n\n            function transformSearch (data, headersGetter) {\n                \n            }\n            return config;\n        }\n    }\n})();","(function() {\n\t'use strict';\n\t\nangular.module('echoes.resources')\n\t.constant('YOUTUBE_API_KEY', 'AIzaSyB7fFNreY1UzX1la5arnnAi3ZOyvqOV6kk');\n\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('media.search')\n        .controller('SearchCtrl', SearchCtrl);\n\n    /* @ngInject */\n    function SearchCtrl($scope, $http, $q, $window, YoutubeSearch) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.title = 'SearchCtrl';\n        vm.params = YoutubeSearch.params;\n        vm.search = search;\n        vm.complete = complete;\n        vm.updateSearch = updateSearch;\n\n        activate();\n\n        function activate() {\n            $scope.$watch('vm.params.q', YoutubeSearch.resetPageToken);\n        }\n\n        function search () {\n        \tYoutubeSearch.search();\n        }\n\n        function updateSearch($item, $model, $label) {\n            search();\n        }\n\n        function complete (val) {\n            var defered = $q.defer();\n            $window.handleEchoesSuggest = handleEchoesSuggest;\n            \n            var config = {\n              params: {\n                hl: \"en\",\n                ds: \"yt\",\n                // oi: \"spell\",\n                // spell: \"1\",\n                xhr: \"t\",\n                client: \"youtube\",\n                q: val,\n                callback: 'handleEchoesSuggest'\n              }\n            };\n            var request = $http\n                .jsonp('http://suggestqueries.google.com/complete/search', config);\n                \n            return defered.promise;\n\n            function handleEchoesSuggest (res) {\n                defered.resolve(res[1].map(function(result){\n                    return result[0];\n                }));\n            }\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('echoes.services')\n        .factory('PlaylistInfo', PlaylistInfo);\n\n    /* @ngInject */\n    function PlaylistInfo($q, $http, YOUTUBE_API_KEY, YoutubeVideoInfo) {\n        var url = 'https://www.googleapis.com/youtube/v3/playlistItems';\n        var config = {\n\t      params: {\n\t        part: 'snippet,contentDetails',\n\t        key: YOUTUBE_API_KEY,\n\t        playlistId: '',\n\t        maxResults: 50\n\t      }\n\t    };\n        var service = {\n            list: list\n        };\n        return service;\n\n        ////////////////\n\n        function list(playlistId) {\n            var defer = $q.defer();\n        \tconfig.params.playlistId = playlistId;\n            playlist(url, config).then(function (items) {\n                defer.resolve(items);\n            });\n\n            return defer.promise;\n        }\n\n        function playlist(url, config) {\n            var items = [];\n            var token;\n            var _defer = $q.defer();\n            \n            getItems();\n\n            return _defer.promise;\n\n            function getItems () {\n                return $http.get(url, config)\n                    .then(function (response) {\n                        token = response.data.nextPageToken;\n                        return response;\n                    })\n                    .then(YoutubeVideoInfo.enrichItems)\n                    .then(function (videos) {\n                        Array.prototype.push.apply(items, videos);\n                        if (token) {\n                            config.params.pageToken = token;\n                            return getItems();\n                        }\n                        _defer.resolve(items);\n                    });\n            }\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('echoes.services')\n        .factory('YoutubePlaylistInfo', YoutubePlaylistInfo);\n\n    /* @ngInject */\n    function YoutubePlaylistInfo($http, YOUTUBE_API_KEY) {\n        var url = 'https://www.googleapis.com/youtube/v3/playlists';\n        var config = {\n\t      params: {\n\t        part: 'snippet,contentDetails',\n\t        key: YOUTUBE_API_KEY,\n\t        id: '',\n\t        maxResults: 50\n\t        // mine: false\n\t      }\n\t    };\n        var service = {\n            list: list\n        };\n        return service;\n\n        ////////////////\n\n        function list(id) {\n        \tconfig.params.id = id;\n        \treturn $http.get(url, config).then(function(res){\n        \t\treturn res.data.items;\n        \t});\n        }\n    }\n})();","(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('echoes.services')\n\t\t.factory('YoutubeSearch', YoutubeSearch);\n\n\t/* @ngInject */\n\tfunction YoutubeSearch ($http, YOUTUBE_API_KEY, YoutubeVideoInfo, YoutubePlaylistInfo, localStorageService){\n\t\tvar url = 'https://www.googleapis.com/youtube/v3/search';\n\t\tvar Storage = {\n\t\t\tQUERY: 'query'\n\t\t};\n\t\tvar types = {\n\t\t\tVIDEO: 'video',\n\t\t\tPLAYLIST: 'playlist'\n\t\t};\n\t\tvar idPropertyName = {\n\t\t\tvideo: 'videoId',\n\t\t\tplaylist: 'playlistId'\n\t\t};\n\t\tvar config = {\n\t\t\tparams: {\n\t\t\t\tpart: 'snippet,id',\n\t\t\t\tkey: YOUTUBE_API_KEY,\n\t\t\t\tq: localStorageService.get(Storage.QUERY),\n\t\t\t\tmaxResults: 50,\n\t\t\t\ttype: types.VIDEO\n\t\t\t}\n\t\t};\n\t\tvar infoService = {\n\t\t\tvideo: YoutubeVideoInfo,\n\t\t\tplaylist: YoutubePlaylistInfo\n\t\t};\n\n\t\tvar items = [];\n\t\tvar isSearching = false;\n\t\tvar nextPageToken;\n\n\t\tvar exports = {\n\t\t\tsearch: search,\n\t\t\tsetType: setType,\n\t\t\tsetDuration: setDuration,\n\t\t\titems: items,\n\t\t\ttypes: types,\n\t\t\tparams: config.params,\n\t\t\tgetFeedType: getFeedType,\n\t\t\tgetIsSearching: getIsSearching,\n\t\t\tsearchMore: searchMore,\n\t\t\tresetPageToken: resetPageToken\n\t\t};\n\n\t\treturn exports;\n\n\t\t///////////////\n\t\t\n\t\tfunction search (query, dontReset){\n\t\t\tif (!dontReset) {\n\t\t\t\tresetList();\n\t\t\t}\n\t\t\tisSearching = true;\n\t\t\tif (query && query !== config.params.q) {\n\t\t\t\tconfig.params.pageToken = '';\n\t\t\t}\n\t\t\t// remove properties not relevant to playlist search\n\t\t\tsanitize();\n\t\t\tconfig.params.q = query || config.params.q;\n\t\t\tlocalStorageService.set(Storage.QUERY, config.params.q);\n\t\t\treturn $http.get(url, config)\n\t\t\t\t.then(fetchContentDetails)\n\t\t\t\t.then(addDuration)\n\t\t\t\t.then(finalize);\n\n\t\t\tfunction fetchContentDetails(response){\n\t\t\t\tvar activeType = config.params.type;\n\t\t\t\tnextPageToken = response.data.nextPageToken;\n\t\t\t\tvar videoIds = response.data.items.map(function(video){\n\t\t\t\t\treturn video.id[idPropertyName[activeType]];\n\t\t\t\t}).join(',');\n\n\t\t\t\tvar _items = infoService[activeType].list(videoIds);\n\t\t\t\treturn _items;\n\t\t\t}\n\n\t\t\tfunction addDuration (_items) {\n\t\t    \tif (getFeedType() === types.VIDEO) {\n\t                _items.forEach(function(item){\n\t                    item.time = YoutubeVideoInfo.toFriendlyDuration(item.contentDetails.duration);\n\t                });\n\t            }\n\t            Array.prototype.push.apply(items, _items);\n\t\t\t}\n\n\t\t\tfunction finalize () {\n\t\t\t\tisSearching = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction searchMore () {\n\t\t\tif (!isSearching && items.length) {\n\t\t\t\tconfig.params.pageToken = nextPageToken;\n\t\t\t\tsearch(config.params.q, true);\n\t\t\t}\n\t\t}\n\t\tfunction resetList () {\n\t\t\titems.length = 0;\n\t\t}\n\n\t\tfunction resetPageToken () {\n\t\t\tconfig.params.pageToken = '';\n\t\t}\n\n\t\tfunction setType (type){\n\t\t\tconfig.params.type = type;\n\t\t\tresetPageToken();\n\t\t\titems.length = 0;\n\t\t}\n\n\t\tfunction setDuration (duration) {\n\t\t\tif ('' === duration || undefined === duration) {\n\t\t\t\tdelete config.params.videoDuration;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconfig.params.videoDuration = duration;\n\t\t}\n\n\t\tfunction getFeedType () {\n\t\t\treturn config.params.type;\n\t\t}\n\n\t\tfunction getQuery () {\n\t\t\treturn config.params.q;\n\t\t}\n\n\t\tfunction getIsSearching () {\n\t\t\treturn isSearching;\n\t\t}\n\n\t\tfunction sanitize () {\n\t\t\tif (config.params.type === types.PLAYLIST) {\n\t\t\t\tdelete config.params.videoDuration;\n\t\t\t}\n\t\t}\n\t}\n\n})();","(function() {\n\t'use strict';\n\n\tangular\n\t.module('echoes.services')\n\t.factory('YoutubeVideoInfo', YoutubeVideoInfo);\n\n\tfunction YoutubeVideoInfo ($q, $http, YOUTUBE_API_KEY, UserPlaylists){\n\t\tvar url = 'https://www.googleapis.com/youtube/v3/videos';\n\t\tvar config = {\n\t\t\tparams: {\n\t\t\t\tpart: 'snippet,contentDetails,statistics',\n\t\t\t\tkey: YOUTUBE_API_KEY,\n\t\t\t\tid: '',\n\t\t\t\tmaxResults: 50\n\t\t\t}\n\t\t};\n\n\t\tvar service = {\n\t\t\tlist: list,\n\t\t\tsetId: setId,\n\t\t\ttoFriendlyDuration: toFriendlyDuration,\n\t\t\tgetPlaylist: getPlaylist,\n\t\t\tenrichItems: enrichItems,\n\t\t\tenrichItemsInBulk: enrichItemsInBulk\n\t\t};\n\n\t\treturn service;\n\n\t\t////////////////////////\n\t\t\n\t\tfunction list(id) {\n\t\t\tsetId(id);\n\t\t\tvar _config = {\n\t\t\t\tparams: angular.extend({}, config.params)\n\t\t\t};\n\t\t\treturn $http.get(url, _config).then(function(res){\n\t\t\t\treturn res.data.items;\n\t\t\t});\n\t\t}\n\n\t\tfunction setId(id) {\n\t\t\tconfig.params.id = id;\n\t\t}\n\n\t\tfunction toFriendlyDuration (time) {\n\t\t\tvar t = time.split(\"PT\")[1];\n\t\t\tvar ts = '';\n\t\t\tif (t) {\n\t\t\t\tt = t.replace(/(H|M)/g, \":\")\n\t\t\t\t.replace(\"S\", \"\");\n\t\t\t\tts = t.split(\":\");\n\t\t\t\tts = ts.map(function(d){\n\t\t\t\t\treturn d.length === 1 ? \"0\" + d : d;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tt = time.split(\"P\")[1];\n\t\t\t\tt = t.replace(\"D\", \"\");\n\t\t\t\tts = [parseInt(t) * 24, ':00:00'];\n\t\t\t}\n\t\t\treturn ts.join(\":\");\n\t\t}\n\n\t\tfunction getPlaylist (playlistId) {\n\t\t\tvar defer = $q.defer();\n\t\t\tUserPlaylists\n\t\t\t.getPlaylist(playlistId)\n\t\t\t.then(function (res) {\n\t\t\t\treturn enrichItemsInBulk(res.items).then(function (res) {\n\t\t\t\t\tvar videos = [];\n\t\t\t\t\tres[0].forEach(function (items) {\n\t\t\t\t\t\tvideos = videos.concat(items);\n\t\t\t\t\t});\n\t\t\t\t\tdefer.resolve(videos);\n\t\t\t\t});\n            });\n            return defer.promise;\n\t\t\t// .then(fetchContentDetails)\n\t\t\t// .then(addDuration);\n\t\t}\n\t\t\n\t\tfunction enrichItemsInBulk (items) {\n\t\t\tvar amount = items.length;\n\t\t\tvar pages = Math.ceil(amount / 50);\n\t\t\tvar _items = [];\n\t\t\tvar promises = [];\n\t\t\tfor (var i = 0; i < pages; i++) {\n\t\t\t\tpromises.push(createPromise(items, i));\n\t\t\t}\n\t\t\treturn $q.all(promises);\n\n\t\t\tfunction createPromise (items, i) {\n\t\t\t\tvar start = i * 50;\n\t\t\t\tvar end = (i + 1) * 50;\n\t\t\t\treturn fetchContentDetails({\n\t\t\t\t\t\titems: items.slice(start, end)\n\t\t\t\t\t})\n\t\t\t\t\t.then(addDuration)\n\t\t\t\t\t.then(function (videos) {\n\t\t\t\t\t\t_items[i] = videos;\n\t\t\t\t\t\treturn _items;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfunction fetchContentDetails(data){\n\t\t\tvar videoIds = data.items.map(function(video){\n\t\t\t\treturn video.snippet.resourceId.videoId;\n\t\t\t}).join(',');\n\n\t\t\treturn list(videoIds);\n\t\t}\n\n\t\tfunction addDuration (items) {\n\t\t\titems.forEach(function(item){\n\t\t\t\titem.time = toFriendlyDuration(item.contentDetails.duration);\n\t\t\t});\n\t\t\treturn items;\n\t\t}\n\n\t\tfunction enrichItems (response) {\n\t\t\treturn fetchContentDetails(response.result || response.data)\n\t\t\t\t.then(addDuration);\n\t\t}\n\t}\n\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('mediaDeck')\n        .controller('UserPlaylistsCtrl', UserPlaylistsCtrl);\n\n    /* @ngInject */\n    function UserPlaylistsCtrl($http, YoutubePlayerSettings) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.title = 'UserPlaylistsCtrl';\n        vm.playlists = YoutubePlayerSettings.nowPlaylist;\n        vm.playVideo = playVideo;\n        vm.nowPlaying = YoutubePlayerSettings.nowPlaying;\n        vm.playlistSearch = '';\n        vm.remove = remove;\n        vm.clearPlaylist = YoutubePlayerSettings.clear;\n\n        // activate();\n\n        // function activate() {\n        // }\n\n        function playVideo (video, index) {\n        \t// YoutubePlayerSettings.playPlaylistId(playlist.id, 0);\n            vm.nowPlaying.index = index;\n            YoutubePlayerSettings.playVideoId(video);\n        }\n\n        function remove ($event, video, index) {\n            $event.stopPropagation();\n            YoutubePlayerSettings.remove(video, index);\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.player')\n        .directive('playerResizer', playerResizer);\n\n    /* @ngInject */\n    function playerResizer (PlayerResizer) {\n        // Usage:\n        //\t<div player-resize=\"fullscreen-or-css-classname\"></div>\n        // Creates:\n        //\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n        \tscope.$watch('isFullScreen()', function (newVal, oldVal) {\n        \t\tif (newVal !== oldVal) {\n        \t\t\telement.toggleClass(attrs.playerResizer, newVal);\n        \t\t}\t\n        \t});\n\n        \tscope.isFullScreen = function(){\n        \t\treturn PlayerResizer.isFullScreen();\n        \t};\n        }\n    }\n})();","(function() {\n\n    angular\n        .module('youtube.player')\n        .factory('PlayerResizer', PlayerResizer);\n\n    /* @ngInject */\n    function PlayerResizer ($window) {\n        var defaultSizes = {\n            height: 270,\n            width: 300\n        };\n        var isFull = false;\n        var service = {\n                height: defaultSizes.height,\n                width: defaultSizes.width,\n                setFullScreen: setFullScreen,\n                isFullScreen: isFullScreen\n            };\n        return service;\n\n        ////////////////\n        function setFullScreen (isFullScreen) {\n            isFull = isFullScreen;\n            if (!isFullScreen) {\n                service.height = defaultSizes.height;\n                service.width = defaultSizes.width;\n                return;\n            }\n            var excludes = ['sidebar'];\n            var sidebar = excludes.indexOf('sidebar') === -1 ? $('.sidebar').outerWidth() : 0;\n            var height = $window.innerHeight - $('#youtube-player-container').outerHeight();\n            var width = $window.innerWidth - sidebar;\n            service.height = height;\n            service.width = width;\n        }\n\n        function isFullScreen () {\n            return isFull;\n        }\n    }\n\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.player')\n\n        /* @ngInject */\n        .factory('youtubePlayerApi', youtubePlayerApi);\n\n        function youtubePlayerApi ($rootScope, $window, $q){\n            /*jshint validthis: true */\n            var that = this;\n            var deferred = $q.defer();\n            var service = {\n                ready: deferred.promise\n            };\n            // service.ready = false;\n            // this.created = false;\n            // this.isReady = function(){\n            //     return that.ready;\n            // };\n            // Inject YouTube's iFrame API\n            (function () {\n                var validProtocols = ['http:', 'https:'];\n                var url = '//www.youtube.com/iframe_api';\n\n                // We'd prefer a protocol relative url, but let's\n                // fallback to `http:` for invalid protocols\n                if (validProtocols.indexOf(window.location.protocol) < 0) {\n                    url = 'http:' + url;\n                }\n                var tag = document.createElement('script');\n                tag.src = url;\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            }());\n\n            // Youtube callback when API is ready\n            $window.onYouTubeIframeAPIReady = function () {\n                // that.ready = true;\n                // $rootScope.$apply(function () {\n                //     console.log('api ready');\n                // });\n                deferred.resolve();\n            };\n\n            return service;\n        }\n\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.player')\n        .directive('youtubePlayer', youtubePlayer);\n    \n        /* @ngInject */\n        function youtubePlayer ($rootScope, $window) {\n            // Usage:\n            //  <div youtube-player video-id=\"vm.video.id\" height=\"vm.height\" width=\"vm.width\"></div>\n            // Creates:\n            //\n            var directive = {\n                link: link,\n                controller: controller,\n                controllerAs: 'vm',\n                restrict: 'A',\n                // replace: true,\n                scope: {\n                \tvideoId: '=',\n                \theight: '=',\n                \twidth: '=',\n                    index: '=',\n                    seek: '=',\n                    autoNext: '@'\n                }\n            };\n            var player;\n\n            return directive;\n\n            /* @ngInject */\n    \t\tfunction controller ($scope, $attrs, youtubePlayerApi, YoutubePlayerSettings) {\n                /*jshint validthis: true */\n    \t\t\tvar vm = this;\n                vm.seek = YoutubePlayerSettings.getSeek;\n                // $scope.apiReady = youtubePlayerApi.isReady;\n                $scope.$watch('vm.seek()', function (newSeconds, oldSeconds) {\n                    if (player && newSeconds !== oldSeconds) {\n                        seekToSeconds(newSeconds);\n                    }\n                });\n                youtubePlayerApi.ready.then(createPlayer);\n\n                function seekToSeconds (seconds) {\n                    player.seekTo(seconds, true);\n                }\n\n                function createPlayer () {\n                    // var playerVars = angular.copy(scope.playerVars);\n                    // playerVars.start = playerVars.start || scope.urlStartTime;\n                    player = new YT.Player($attrs.id, {\n                        height: $scope.height,\n                        width: $scope.width,\n                        videoId: $scope.videoId,\n                        // playerVars: playerVars,\n                        events: {\n                            onReady: onPlayerReady,\n                            onStateChange: onPlayerStateChange\n                        }\n                    });\n                    YoutubePlayerSettings.setYTPlayer(player);\n                    player.id = $attrs.id;\n                    return player;\n                }\n\n                function onPlayerStateChange (event) {\n                    var state = event.data;\n                    \n                    if (angular.isDefined($attrs.autoNext) && state === YT.PlayerState.ENDED) {\n                        YoutubePlayerSettings.playNextTrack();\n                    }\n\n                    if (state === YT.PlayerState.PAUSED) {\n                        YoutubePlayerSettings.playerState = YT.PlayerState.PAUSED;\n                    }\n                    if (state === YT.PlayerState.PLAYING) {\n                        YoutubePlayerSettings.playerState = YT.PlayerState.PLAYING;\n                        console.log('playing', YoutubePlayerSettings.playerState);\n                    }\n                    $scope.$apply();\n                    // scope.$apply(function () {\n                    //     scope.player.currentState = state;\n                    // });\n                }\n\n                function onPlayerReady (event) {\n                    // YoutubePlayerSettings.setYTPlayer(player);\n                    // applyBroadcast(eventPrefix + 'ready', scope.player, event);\n                }\n    \t\t}\n\n            function link(scope, element, attrs) {\n            \tscope.$watch('videoId', function (newVideoId) {\n                    if (player) {\n\t            \t\tplayMedia(newVideoId);\n            \t\t}\n            \t});\n\n                scope.$watch('height', function(newHeight, oldHeight){\n                    if (player && newHeight !== oldHeight) {\n                        player.setSize(scope.width, scope.height);\n                    }\n                });\n\n                function playMedia(id) {\n                    player.loadVideoById(id);\n                    player.playVideo();\n                }\n            }\n        }\n})();","(function() {\n\n    angular\n        .module('youtube.player')\n        .factory('YoutubePlayerSettings', YoutubePlayerSettings);\n\n    /* @ngInject */\n    function YoutubePlayerSettings() {\n        var nowPlaying = {\n            mediaId: '',\n            index: 0,\n            media: {}\n        };\n        var seek = 0;\n        var ytplayer = {};\n        var nowPlaylist = [];\n        var service = {\n            getCurrentId: getCurrentId,\n            playVideoId: playVideoId,\n            playPlaylist: playPlaylist,\n            nowPlaying: nowPlaying,\n            nowPlaylist: nowPlaylist,\n            queueVideo: queueVideo,\n            getSeek: getSeek,\n            seekTo: seekTo,\n            playNextTrack: playNextTrack,\n            playPreviousTrack: playPreviousTrack,\n            remove: remove,\n            clear: clear,\n            setYTPlayer: setYTPlayer,\n            getYTPlayer: getYTPlayer,\n            getPlayerState: getPlayerState,\n            playerState: {}\n        };\n        return service;\n\n        ////////////////\n\n        function getCurrentId() {\n        \treturn nowPlaying.mediaId;\n        }\n\n        function playVideoId (video) {\n        \tnowPlaying.mediaId = video.id;\n            seek = 0;\n            updatePlaylistIndex(video);\n            nowPlaying.media = video;\n            \n        }\n\n        function queueVideo (video) {\n            nowPlaylist.push(video || {});\n        }\n\n        function updatePlaylistIndex (video) {\n            nowPlaylist.some(function(track, index){\n                if (track.id === video.id) {\n                    nowPlaying.index = index;\n                    return true;\n                }\n            });\n        }\n\n        function playPlaylist(videos, index) {\n            var indexToPlay = angular.isNumber(index) ? index : 0;\n            var firstVideo = videos[indexToPlay];\n            nowPlaylist.length = 0;\n            angular.extend(nowPlaylist, videos);\n            playVideoId(firstVideo);\n        }\n\n        function getSeek () {\n            return seek;\n        }\n\n        function seekTo (seconds) {\n            if (!isNaN(seconds) && angular.isNumber(seconds)){\n                seek = seconds;\n            }\n        }\n\n        function playNextTrack () {\n            var nextIndex = nowPlaying.index + 1;\n            if (nextIndex === nowPlaylist.length) {\n                nextIndex = 0;\n            }\n            playVideoId(nowPlaylist[nextIndex]);\n        }\n\n        function playPreviousTrack () {\n            var nowIndex = nowPlaying.index;\n            if (nowPlaylist.length === 1 || nowPlaylist.length === 0) {\n                return;\n            }\n            var prevIndex = nowIndex === 0 ? nowPlaylist.length - 1 : nowIndex - 1;\n            playVideoId(nowPlaylist[prevIndex]);\n        }\n        function remove (video, index) {\n            nowPlaylist.splice(index, 1);\n            updatePlaylistIndex(nowPlaying.media);\n        }\n\n        function clear () {\n            nowPlaylist.length = 0;\n        }\n\n        function setYTPlayer (player) {\n            ytplayer = player;\n        }\n\n        function getYTPlayer () {\n            return ytplayer;\n        }\n\n        function getPlayerState () {\n            return service.playerState;\n        }\n    }\n\n})();","(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('mediaDeck')\n\t\t.controller('YoutubeVideoCtrl', YoutubeVideoCtrl);\n\n\t/* @ngInject */\n\tfunction YoutubeVideoCtrl($scope, YoutubePlayerSettings, YoutubeVideoInfo, $routeParams, $location){\n\t\tvar vm = this;\n\t\tvm.goBack = goBack;\n\t\tvm.playVideo = playVideo;\n\n\t\tactivate();\n\t\t////////////////////////\n\t\t\n\t\tfunction activate () {\n\t\t\tYoutubeVideoInfo.list($routeParams.id).then(function(items){\n\t\t\t\tvm.video = items[0];\n\t\t\t\tvm.time = getDuration(items[0].contentDetails.duration);\n\t\t\t});\n\t\t}\n\n\t\tfunction playVideo () {\n\t\t\tYoutubePlayerSettings.queueVideo(vm.video);\n\t\t\tYoutubePlayerSettings.playVideoId(vm.video);\n\t\t}\n\n\t\tfunction goBack () {\n\t\t\t$location.url('/');\n\t\t}\n\n\t\tfunction getDuration (time) {\n\t\t\tvar t = time.split(\"PT\")[1]\n\t\t\t\t.replace(/(H|M)/g, \":\")\n\t\t\t\t.replace(\"S\", \"\");\n\t\t\tvar ts = t.split(\":\");\n\t\t\tts = ts.map(function(d){\n\t\t\t\treturn d.length === 1 ? \"0\" + d : d;\n\t\t\t});\n\t\t\treturn ts.join(\":\");\n\t\t};\n\t}\n\n})();","(function(){\n\t\n\tangular\n\t\t.module('mediaDeck')\n\t\t.controller('YoutubeVideosCtrl', YoutubeVideosCtrl);\n\n\tfunction YoutubeVideosCtrl($scope, YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo){\n\t\tvar vm = this;\n\n\t\tvm.playVideo = playVideo;\n\t\tvm.queueVideo = queueVideo;\n\t\tvm.feedType = YoutubeSearch.getFeedType;\n\t\tvm.videos = YoutubeSearch.items;\n\t\tvm.loadMore = YoutubeSearch.searchMore;\n\n\t\tactivate();\n\t\t///////////\n\t\tfunction activate () {\n\t\t\tYoutubeSearch.search();\n\t\t}\n\n\t\tfunction playVideo (video) {\n\t\t\tif (video.kind === 'youtube#playlist') {\n\t\t\t\tYoutubeVideoInfo.getPlaylist(video.id).then(playPlaylistItems);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tYoutubePlayerSettings.queueVideo(video);\n\t\t\tYoutubePlayerSettings.playVideoId(video);\n\t\t}\n\n\t\tfunction queueVideo (video) {\n\t\t\tYoutubePlayerSettings.queueVideo(video);\n\t\t}\n\n\t\tfunction playPlaylistItems (videos) {\n\t\t\tangular.extend(YoutubePlayerSettings.nowPlaylist, videos);\n\t\t\tYoutubePlayerSettings.playVideoId(videos[0]);\n\t\t}\n\t}\n\n})();","(function() {\n\n    angular\n        .module('mediaDeck')\n        .controller('YoutubePlayerCtrl', YoutubePlayerCtrl);\n\n    /* @ngInject */\n    function YoutubePlayerCtrl($scope, YoutubePlayerSettings, PlayerResizer, PlaylistEditorSettings) {\n        /*jshint validthis: true */\n        var vm = this;\n        vm.video = YoutubePlayerSettings.nowPlaying;\n        vm.nowPlaylist = YoutubePlayerSettings.nowPlaylist;\n        vm.size = PlayerResizer;\n        vm.showPlayer = false;\n        vm.togglePlayer = togglePlayer;\n        vm.isFullScreen = false;\n        vm.toggleFullScreen = toggleFullScreen;\n        vm.seek = YoutubePlayerSettings.getSeek;\n        vm.addToPlaylist = addToPlaylist;\n        vm.playNextTrack = YoutubePlayerSettings.playNextTrack;\n        vm.playPreviousTrack = YoutubePlayerSettings.playPreviousTrack;\n        vm.isPlaying = isPlayerPlaying;\n        vm.play = play;\n        vm.pause = pause;\n\n        $scope.$watch('vm.video', function (newShow, oldShow) {\n            if(newShow !== oldShow) {\n                togglePlayer(true);\n            }\n        }, true);\n\n        function togglePlayer (visible) {\n            vm.showPlayer = visible;\n        }\n\n        function toggleFullScreen () {\n            vm.isFullScreen = !vm.isFullScreen;\n            PlayerResizer.setFullScreen(vm.isFullScreen);\n        }\n\n        function addToPlaylist () {\n            if (vm.video.mediaId !== '') {\n                PlaylistEditorSettings.addMedia(vm.video.media);\n                PlaylistEditorSettings.show();\n            }\n        }\n\n        function play () {\n            YoutubePlayerSettings.getYTPlayer().playVideo();\n        }\n\n        function pause () {\n            YoutubePlayerSettings.getYTPlayer().pauseVideo();\n        }\n\n        function isPlayerPlaying () {\n            // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n            return YoutubePlayerSettings.getPlayerState() === 1;\n        }\n    }\n\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.api')\n        .factory('UserPlaylists', UserPlaylists)\n        .factory('ApiPlaylists', ApiPlaylists);\n\n    /* @ngInject */\n    function UserPlaylists($rootScope, uGapi, ApiPlaylists) {\n    \t// var api = uGapi({ \n     //        resourceName: 'playlists',\n     //        pages: 'all'\n     //    });\n        var api = ApiPlaylists;\n        var playlists = uGapi({\n            resourceName: 'playlistItems',\n            pages: 'all'\n        });\n        var tracks = [];\n        var service = {\n            tracks: tracks,\n            list: list,\n            getPlaylist: getPlaylist,\n            addToPlaylist: addToPlaylist,\n            removePlaylist: removePlaylist,\n            createPlaylist: createPlaylist\n        };\n        activate();\n\n        return service;\n\n        ////////////////\n        function activate () {\n        \t$rootScope.$on('user-signed-in', list);\n        }\n\n        function list (user) {\n        \tapi.list().then(updateItems, onError, updateItems);\n        }\n\n        function updateItems (resource) {\n        \tArray.prototype.push.apply(tracks, resource.items);\n        }\n\n        function onError (err) {\n        \tconsole.log(err);\n        }\n\n        function getPlaylist (playlistId, transformFunc) {\n            delete playlists.params.mine;\n            playlists.params.playlistId = playlistId;\n            return playlists.list({}, transformFunc);\n        }\n\n        function addToPlaylist (playlistId, media) {\n            var params = {\n                part: 'snippet',\n                resource: {\n                    snippet: {\n                        playlistId: playlistId,\n                        resourceId: {\n                            videoId: media.id,\n                            playlistId: playlistId,\n                            kind: 'youtube#video'\n                        }\n                    }\n                }\n            };\n            return playlists.insert(params);\n        }\n\n        function removePlaylist (playlistId) {\n            return api.remove(playlistId).then(function (response) {\n                tracks.some(function (playlist, index) {\n                    if (playlist.id === playlistId) {\n                        tracks.splice(index, 1);\n                    }\n                });\n                return response;\n            });\n        }\n\n        function createPlaylist (title, description) {\n            var params = {\n                part: 'snippet,contentDetails',\n                resource: {\n                    snippet: {\n                        title: title,\n                        description: description || ''\n                    }\n                }\n            };\n            tracks.length = 0;\n            return api.insert(params).then(list);\n        }\n    }\n\n    function ApiPlaylists (uGapi) {\n        return uGapi({ \n            resourceName: 'playlists',\n            pages: 'all'\n        });\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('echoes.resources')\n        .factory('YoutubeUser', YoutubeUser);\n\n    /* @ngInject */\n    function YoutubeUser($rootScope, $http) {\n    \tvar data = {};\n        var revokeUrl = 'https://accounts.google.com/o/oauth2/revoke?token=';\n        var service = {\n            update: update,\n            data: data,\n            isSignedIn: isSignedIn,\n            signOut: signOut\n        };\n        return service;\n\n        ////////////////\n\n        function update(user) {\n        \tangular.copy(user, data);\n        \t$rootScope.$broadcast('user-signed-in', data);\n        }\n\n        function isSignedIn () {\n            return Object.keys(data).length;\n        }\n        \n        function signOut () {\n            var url = revokeUrl + gapi.auth.getToken().access_token;\n            $http.get(url).then(signOutSuccess, singOutFailed);\n\n            function signOutSuccess (ev) {\n                console.log('signout success', ev);\n                clearUserData();\n            }\n\n            function singOutFailed (response) {\n                if ('' === response.statusText) {\n                    return signOutSuccess(response);\n                }\n                console.log('singout failed');\n            }\n        }\n\n        function clearUserData () {\n            Object.keys(data).forEach(function (key) {\n                delete data[key];\n            });\n        }\n    }\n})();","(function() {\n    'use strict';\n\n\tangular\n\t\t.module('ui.controls')\n\t\t.directive('eDropdown', eDropdown);\n\n\t/* @ngInject */\n\tfunction eDropdown() {\n\t\t// Usage:\n        //\t<e-dropdown label=\"presets\" items=\"[array]\" \n        // \t\ticon=\"fa-type\" on-select=\"fun(item ,index)\"\n        //   \tselected=\"index\"></e-dropdown>\n        // Creates:\n        //\n        var directive = {\n\t\t\trestrict: 'E',\n\t\t\treplace: true,\n\t\t\ttemplateUrl: 'app/directives/ui/e-dropdown/e-dropdown-tpl.html',\n\t\t\tscope: {\n\t\t\t\tlabel: '@',\n\t\t\t\ticon: '@',\n\t\t\t\titems: '=',\n\t\t\t\tonSelect: '&',\n\t\t\t\tselected: '@'\n\t\t\t},\n\t\t\tlink: link\n\t\t};\n\t\treturn directive;\n\n\t\tfunction link (scope, element, attrs) {\n\t\t\tscope.activeIndex = attrs.selected !== '' ? parseInt(scope.selected) : 0;\n\t\t\tscope.handleClick = function (item, $index) {\n\t\t\t\tscope.activeIndex = $index;\n\t\t\t\tscope.onSelect({\n\t\t\t\t\titem: item,\n\t\t\t\t\tindex: $index\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('youtube.directives')\n        .directive('youtubeSignIn', youtubeSignIn)\n        .factory('YoutubeApi', YoutubeApi)\n        .factory('YoutubeClientApi', YoutubeClientApi)\n        .factory('GoogleClientApi', GoogleClientApi);\n\n    /* @ngInject */\n    function YoutubeApi ($window, $rootScope, $q, GoogleClientApi) {\n        var defered = $q.defer();\n        var authDefered = $q.defer();\n        var service = {\n            load: load,\n            auth: auth,\n            signIn: signIn\n        };\n\n        activate();\n\n        return service;\n\n        function activate(){\n            // Youtube callback when API is ready\n            $window.onGapiLoad = function () {\n                $rootScope.$apply(function () {\n                    defered.resolve(); \n                });\n            };\n\n            // Inject YouTube's client API\n            (function () {\n                var validProtocols = ['http:', 'https:'];\n                var url = '//apis.google.com/js/client.js?onload=onGapiLoad';\n\n                // We'd prefer a protocol relative url, but let's\n                // fallback to `http:` for invalid protocols\n                if (validProtocols.indexOf(window.location.protocol) < 0) {\n                    url = 'http:' + url;\n                }\n                var tag = document.createElement('script');\n                tag.src = url;\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            }());\n        }\n\n        function load() {\n            return defered.promise;\n        }\n\n        function auth () {\n            load().then(function(){\n                gapi.auth.authorize({\n                    client_id: '971861197531',\n                    scope: \"https://www.googleapis.com/auth/youtube\",\n                    // false - is for showing pop up\n                    immediate: true, \n                }, function(authResult){\n                    signIn(authResult);\n                });\n            });\n            return authDefered.promise;\n        }\n\n        function signIn (authResult) {\n            GoogleClientApi.load('youtube', 'v3').then(function(res){\n                if (authHasError(authResult)){\n                    return;\n                }\n                gapi.client.youtube.channels.list({\n                    part: 'snippet,contentDetails',\n                    mine: true\n                }).then(function(result){\n                    console.log('results user', result);\n                    authDefered.resolve(result.result.items[0], authResult);\n                    $rootScope.$digest();\n                });\n            });\n        }\n\n        function authHasError (auth) {\n            return auth.error && auth.error.indexOf('fail') > -1;\n        }\n    }\n\n    /* @ngInject */\n    function youtubeSignIn ($window, YoutubeApi, YoutubeClientApi, GoogleClientApi) {\n        // Usage:\n        //\t<a youtube-sign-in=\"\">Youtube Sign In</a>\n        // Creates:\n        //\n        var directive = {\n            link: link,\n            restrict: 'A',\n            scope: {\n            \tyoutubeSignIn: '&'\n            }\n        };\n        return directive;\n\n        function link(scope, element, attrs) {\n        \telement.get(0).addEventListener('click', authorize);\n\n        \tfunction authorize(ev){\n        \t\tev.preventDefault();\n                YoutubeClientApi.load().then(function(){\n                    gapi.auth.authorize({\n                        client_id: '971861197531',\n                        scope: \"https://www.googleapis.com/auth/youtube\",\n                        // false - is for showing pop up\n                        immediate: false, \n                    }, handleAuth);\n                });\n        \t}\n\n        \tfunction handleAuth(authResult) {\n    \t\t\tYoutubeApi.signIn(authResult);\n    \t\t}\n        }\n    }\n\n    /* @ngInject */\n    function YoutubeClientApi ($q, $rootScope, $window, GoogleClientApi, YoutubeApi){\n    \tvar defered = $q.defer();\n    \tvar service = {\n    \t\tload: load\n    \t};\n\n    \treturn service;\n\n    \tfunction load(api, version) {\n    \t\t// api.api = api;\n    \t\t// api.version = version;\n            YoutubeApi.load().then(function(){\n                defered.resolve();\n            });\n    \t\treturn defered.promise;\n    \t}\n    }\n\n    /* @ngInject */\n    function GoogleClientApi ($q) {\n    \tvar DeveloperApiKey = 'AIzaSyCgrK5ds9uCSRM-WBUFm8V8jPX66q8-Od0';\n    \tvar clientId = '971861197531';\n    \tvar defered = $q.defer();\n    \tvar service = {\n    \t\tload: load\n    \t};\n    \treturn service;\n\n    \tfunction load (client, version) {\n    \t\tgapi.client.setApiKey(DeveloperApiKey);\n\t\t\t//  load the gapi api\n\t\t\tgapi.client.load(client, version, handleResponse);\n\t\t\treturn defered.promise;\n    \t}\n\n    \tfunction handleResponse (res) {\n    \t\tconsole.log('client load success', res);\n    \t\tdefered.resolve(res);\n\t    }\n\t}\n})();","(function() {\n    'use strict';\n\n\tangular\n\t\t.module('youtube.directives')\n\t\t.directive('mediaList', mediaList);\n\t\t\n\t\t/* @ngInject */\n\t\tfunction mediaList() {\n\t\t\t// Usage:\n\t        //\n\t        // Creates:\n\t        //\n\t\t\tvar directive = {\n\t\t\t\trestrict: 'E',\n\t\t\t\treplace: true,\n\t\t\t\ttemplateUrl: 'app/directives/youtube/youtube-list/media-list.tpl.html',\n\t\t\t\tscope: {\n\t\t\t\t\tvideos: '=model',\n\t\t\t\t\tonSelect: '&',\n\t\t\t\t\tonQueue: '&'\n\t\t\t\t},\n\t\t\t\tlink: link\n\t\t\t};\n\n\t\t\treturn directive;\n\n\t\t\tfunction link (scope, element, attrs){\n\t\t\t\tscope.playSelectedVideo = function(video){\n\t\t\t\t\tscope.onSelect({\n\t\t\t\t\t\tvideo: video\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tscope.queueSelectedVideo = function (video) {\n\t\t\t\t\tscope.onQueue({\n\t\t\t\t\t\tvideo: video\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n})();","(function() {\nangular.module('youtube.directives')\n.directive('youtubeMedia', YoutubeMedia);\n\n/* @ngInject */\nfunction YoutubeMedia(UserPlaylists, PlaylistEditorSettings) {\n\tvar directive = {\n\t\trestrict: 'E',\n\t\ttemplateUrl: 'app/directives/youtube/youtube-media/youtube.media.tpl.html',\n\t\treplace: true,\n\t\tscope: {\n\t\t\tonPlay: '&',\n\t\t\tonQueue: '&',\n\t\t\tvideo: '='\n\t\t},\n\t\tcontroller: controller,\n\t\tcontrollerAs: 'vm'\n\t};\n\n\treturn directive;\n\n\t/* @ngInject */\n\tfunction controller ($scope) {\n\t\tvar vm = this;\n\t    vm.playVideo = playVideo;\n\t\tvm.queueVideo = queueVideo;\n\t\tvm.add = add;\n\n\t    function playVideo (video){\n\t    \t$scope.onPlay({\n\t    \t\tvideo: video\n\t    \t});\n\t\t}\n\n\t\tfunction queueVideo(video) {\n\t\t\t$scope.onQueue({\n\t\t\t\tvideo: video\n\t\t\t});\n\t\t}\n\n\t\tfunction add () {\n\t\t\tPlaylistEditorSettings.addMedia($scope.video);\n\t\t\tPlaylistEditorSettings.show();\n\t\t\t// UserPlaylists.addToPlaylist('PLaBZBIpdZNOe1w40XjfS9Y1QJbyJMkWnR', $scope.video);\n\t\t}\n\t}\n\n}\n\n})();","(function() {\nangular.module('youtube.directives')\n.directive('youtubePlaylistItem', YoutubePlaylistItem);\n\t\nfunction YoutubePlaylistItem() {\n\tvar directive = {\n\t\trestrict: 'E',\n\t\ttemplateUrl: 'app/directives/youtube/youtube-playlist/youtube.playlist.tpl.html',\n\t\treplace: true,\n\t\tscope: {\n\t\t\tonPlay: '&',\n\t\t\tvideo: '='\n\t\t},\n\t\tlink: link\n\t};\n\n\treturn directive;\n\n\tfunction link (scope, element, attrs) {\n\t\tscope.isVideoItem = function (video) {\n\t    \treturn video.id.kind === 'youtube#video';\n\t    };\n\n\t    scope.isChannelItem = function(video){\n\t    \treturn video.id.kind === 'youtube#channel';\n\t    };\n\n\t    scope.playVideo = function(video){\n\t    \tscope.onPlay({\n\t    \t\tvideo: video\n\t    \t});\n\t\t};\n\t}\n\n}\n\n})();"],"sourceRoot":"/source/"}